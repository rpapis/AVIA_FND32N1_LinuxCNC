# #######################################
#
# HAL file for HostMot2 with 5 servos
#
# Derived from Ted Hyde's original hm2-servo config
#
# Based up work and discussion with Seb & Peter & Jeff
# GNU license references - insert here. www.linuxcnc.org
#
#
# ########################################
# Firmware files are in /lib/firmware/hm2/7i43/
# Must symlink the hostmot2 firmware directory of sanbox to
# /lib/firmware before running EMC2...
# sudo ln -s $HOME/emc2-sandbox/src/hal/drivers/mesa-hostmot2/firmware /lib/firmware/hm2
#
# See also:
# <http://www.linuxcnc.org/docs/devel/html/man/man9/hostmot2.9.html#config%20modparam>
# and http://wiki.linuxcnc.org/cgi-bin/emcinfo.pl?HostMot2
#
# #####################################################################


# ###################################
# Core EMC/HAL Loads
# ###################################

# kinematics
loadrt [KINS]KINEMATICS
#autoconverted  trivkins

# motion controller, get name and thread periods from ini file
loadrt [EMCMOT]EMCMOT servo_period_nsec=[EMCMOT]SERVO_PERIOD num_joints=[KINS]JOINTS 

# standard components
loadrt pid num_chan=3 


# hostmot2 driver
# if you have any firmware trouble, enable the debug flags here and see what's going on in the syslog
#loadrt hostmot2 debug_idrom=1 debug_module_descriptors=1 debug_pin_descriptors=1 debug_modules=1
loadrt hostmot2

# load low-level driver
loadrt [HOSTMOT2](DRIVER) config=[HOSTMOT2](CONFIG)

setp hm2_[HOSTMOT2](BOARD).0.pwmgen.pwm_frequency 48000

setp hm2_[HOSTMOT2](BOARD).0.watchdog.timeout_ns 10000000


# ################################################
# THREADS
# ################################################

addf hm2_[HOSTMOT2](BOARD).0.read          servo-thread

addf motion-command-handler                servo-thread
addf motion-controller                     servo-thread

addf pid.0.do-pid-calcs                    servo-thread
addf pid.1.do-pid-calcs                    servo-thread
addf pid.2.do-pid-calcs                    servo-thread
#addf pid.3.do-pid-calcs                    servo-thread
#addf pid.4.do-pid-calcs                    servo-thread

addf hm2_[HOSTMOT2](BOARD).0.write         servo-thread

       

# ######################################################
# Axis-of-motion Specific Configs (not the GUI)
# ######################################################


# ################
# X [0] Axis
# ################

# axis enable chain
newsig emcmot.00.enable bit
sets emcmot.00.enable FALSE
net emcmot.00.enable => pid.0.enable
net emcmot.00.enable => hm2_[HOSTMOT2](BOARD).0.pwmgen.00.enable
net emcmot.00.enable <= joint.0.amp-enable-out 


# encoder feedback
setp hm2_[HOSTMOT2](BOARD).0.encoder.00.counter-mode 0
setp hm2_[HOSTMOT2](BOARD).0.encoder.00.filter 1
setp hm2_[HOSTMOT2](BOARD).0.encoder.00.index-invert 0
setp hm2_[HOSTMOT2](BOARD).0.encoder.00.index-mask 0
setp hm2_[HOSTMOT2](BOARD).0.encoder.00.index-mask-invert 0

setp  hm2_[HOSTMOT2](BOARD).0.encoder.00.scale  [JOINT_0]INPUT_SCALE
#net motor.00.pos-fb hm2_[HOSTMOT2](BOARD).0.encoder.00.position => pid.0.feedback
net motor.00.pos-fb joint.0.motor-pos-cmd
net motor.00.pos-fb => joint.0.motor-pos-fb #push copy back to Axis GUI

# set PID loop gains from inifile
setp pid.0.Pgain [JOINT_0]P
setp pid.0.Igain [JOINT_0]I
setp pid.0.Dgain [JOINT_0]D
setp pid.0.bias [JOINT_0]BIAS
setp pid.0.FF0 [JOINT_0]FF0
setp pid.0.FF1 [JOINT_0]FF1
setp pid.0.FF2 [JOINT_0]FF2
setp pid.0.deadband [JOINT_0]DEADBAND
setp pid.0.maxoutput [JOINT_0]MAX_OUTPUT

# position command signals
setp hm2_[HOSTMOT2](BOARD).0.pwmgen.00.output-type 1 #PWM up on pin0, #PWM down on pin1
setp hm2_[HOSTMOT2](BOARD).0.pwmgen.00.offset-mode 1 # offset mode so 50% = 0
setp hm2_[HOSTMOT2](BOARD).0.pwmgen.00.scale  [JOINT_0]OUTPUT_SCALE

#net emcmot.00.pos-cmd joint.0.motor-pos-cmd => pid.0.command
net motor.00.command  pid.0.output  =>  hm2_[HOSTMOT2](BOARD).0.pwmgen.00.value


# ################
# Y [1] Axis
# ################

# axis enable chain
newsig emcmot.01.enable bit
sets emcmot.01.enable FALSE
net emcmot.01.enable => pid.1.enable
net emcmot.01.enable => hm2_[HOSTMOT2](BOARD).0.pwmgen.01.enable
net emcmot.01.enable <= joint.1.amp-enable-out 

# encoder feedback
setp hm2_[HOSTMOT2](BOARD).0.encoder.01.counter-mode 0
setp hm2_[HOSTMOT2](BOARD).0.encoder.01.filter 1
setp hm2_[HOSTMOT2](BOARD).0.encoder.01.index-invert 0
setp hm2_[HOSTMOT2](BOARD).0.encoder.01.index-mask 0
setp hm2_[HOSTMOT2](BOARD).0.encoder.01.index-mask-invert 0

setp  hm2_[HOSTMOT2](BOARD).0.encoder.01.scale  [JOINT_1]INPUT_SCALE
#net motor.01.pos-fb hm2_[HOSTMOT2](BOARD).0.encoder.01.position => pid.1.feedback
net motor.01.pos-fb joint.1.motor-pos-cmd
net motor.01.pos-fb => joint.1.motor-pos-fb #push copy back to Axis GUI

# set PID loop gains from inifile
setp pid.1.Pgain [JOINT_1]P
setp pid.1.Igain [JOINT_1]I
setp pid.1.Dgain [JOINT_1]D
setp pid.1.bias [JOINT_1]BIAS
setp pid.1.FF0 [JOINT_1]FF0
setp pid.1.FF1 [JOINT_1]FF1
setp pid.1.FF2 [JOINT_1]FF2
setp pid.1.deadband [JOINT_1]DEADBAND
setp pid.1.maxoutput [JOINT_1]MAX_OUTPUT

# position command signals
setp hm2_[HOSTMOT2](BOARD).0.pwmgen.01.output-type 1 #PWM up on pin0, #PWM down on pin1
setp hm2_[HOSTMOT2](BOARD).0.pwmgen.01.offset-mode 1 # offset mode so 50% = 0
setp hm2_[HOSTMOT2](BOARD).0.pwmgen.01.scale [JOINT_1]OUTPUT_SCALE

#net emcmot.01.pos-cmd joint.1.motor-pos-cmd => pid.1.command
net motor.01.command  pid.1.output  =>  hm2_[HOSTMOT2](BOARD).0.pwmgen.01.value


# ################
# Z [2] Axis
# ################

# axis enable chain
newsig emcmot.02.enable bit
sets emcmot.02.enable FALSE
net emcmot.02.enable => pid.2.enable
net emcmot.02.enable => hm2_[HOSTMOT2](BOARD).0.pwmgen.02.enable
net emcmot.02.enable <= joint.2.amp-enable-out 

# encoder feedback
setp hm2_[HOSTMOT2](BOARD).0.encoder.02.counter-mode 0
setp hm2_[HOSTMOT2](BOARD).0.encoder.02.filter 1
setp hm2_[HOSTMOT2](BOARD).0.encoder.02.index-invert 0
setp hm2_[HOSTMOT2](BOARD).0.encoder.02.index-mask 0
setp hm2_[HOSTMOT2](BOARD).0.encoder.02.index-mask-invert 0

setp  hm2_[HOSTMOT2](BOARD).0.encoder.02.scale  [JOINT_2]INPUT_SCALE
#net motor.02.pos-fb hm2_[HOSTMOT2](BOARD).0.encoder.02.position => pid.2.feedback
net motor.02.pos-fb joint.2.motor-pos-cmd
net motor.02.pos-fb => joint.2.motor-pos-fb #push copy back to Axis GUI

# set PID loop gains from inifile
setp pid.2.Pgain [JOINT_2]P
setp pid.2.Igain [JOINT_2]I
setp pid.2.Dgain [JOINT_2]D
setp pid.2.bias [JOINT_2]BIAS
setp pid.2.FF0 [JOINT_2]FF0
setp pid.2.FF1 [JOINT_2]FF1
setp pid.2.FF2 [JOINT_2]FF2
setp pid.2.deadband [JOINT_2]DEADBAND
setp pid.2.maxoutput [JOINT_2]MAX_OUTPUT

# position command signals
setp hm2_[HOSTMOT2](BOARD).0.pwmgen.02.output-type 1 #PWM up on pin0, #PWM down on pin1
setp hm2_[HOSTMOT2](BOARD).0.pwmgen.02.offset-mode 1 # offset mode so 50% = 0
setp hm2_[HOSTMOT2](BOARD).0.pwmgen.02.scale [JOINT_2]OUTPUT_SCALE

#net emcmot.02.pos-cmd joint.2.motor-pos-cmd => pid.2.command
net motor.02.command  pid.2.output  =>  hm2_[HOSTMOT2](BOARD).0.pwmgen.02.value

# ##################################################
# Simulated home switch
# ##################################################

loadrt comp names=comp_x,comp_y,comp_z

addf comp_x servo-thread
addf comp_y servo-thread
addf comp_z servo-thread

net Xhomeswpos => comp_x.in0
net Yhomeswpos => comp_y.in0
net Zhomeswpos => comp_z.in0

net motor.00.pos-fb => comp_x.in1
net motor.01.pos-fb => comp_y.in1
net motor.02.pos-fb => comp_z.in1

sets Xhomeswpos [JOINT_0]HOME
sets Yhomeswpos [JOINT_1]HOME
sets Zhomeswpos [JOINT_2]HOME

setp comp_x.hyst .02
setp comp_y.hyst .02
setp comp_z.hyst .02

net home-x-input <= comp_x.out
net home-y-input <= comp_y.out
net home-z-input <= comp_z.out


# ##################################################
# Standard I/O Block - EStop, Etc
# ##################################################

#Input and Outputs
net flood-output iocontrol.0.coolant-flood

#spindle control
#moved to postui file due to breake controll
net spindle-CW spindle.0.forward
net spindle-CCW spindle.0.reverse

#HM2 io map to AVIA milling machine

#SSR outputs for relays
net emcmot.00.enable            => hm2_[HOSTMOT2](BOARD).0.ssr.00.out-00 # power on servos
net spindle-CW                  => hm2_[HOSTMOT2](BOARD).0.ssr.00.out-01
net spindle-CCW                 => hm2_[HOSTMOT2](BOARD).0.ssr.00.out-02
net flood-output                => hm2_[HOSTMOT2](BOARD).0.ssr.00.out-03
net spindle-brake-enable        => hm2_[HOSTMOT2](BOARD).0.ssr.00.out-04
net emcmot.00.enable            => hm2_[HOSTMOT2](BOARD).0.ssr.00.out-05

#inputs
#net home-x-input                hm2_[HOSTMOT2](BOARD).0.inmux.00.input-00
#net home-y-input                hm2_[HOSTMOT2](BOARD).0.inmux.00.input-01
#net home-z-input                hm2_[HOSTMOT2](BOARD).0.inmux.00.input-02
net motion-ready-input          hm2_[HOSTMOT2](BOARD).0.inmux.00.input-03
net spindle-CW-input            hm2_[HOSTMOT2](BOARD).0.inmux.00.input-04
net spindle-CCW-input           hm2_[HOSTMOT2](BOARD).0.inmux.00.input-05
net spindle-break-input         hm2_[HOSTMOT2](BOARD).0.inmux.00.input-06
net in7-input                   hm2_[HOSTMOT2](BOARD).0.inmux.00.input-07
net in8-input                   hm2_[HOSTMOT2](BOARD).0.inmux.00.input-08
net K3-input                    hm2_[HOSTMOT2](BOARD).0.inmux.00.input-09
net servo-ready-input           hm2_[HOSTMOT2](BOARD).0.inmux.00.input-10
net motion-ready2-input         hm2_[HOSTMOT2](BOARD).0.inmux.00.input-11


#probe
net probe_trig-input-neg        hm2_[HOSTMOT2](BOARD).0.inmux.00.input-12
net probe-trig-input            hm2_[HOSTMOT2](BOARD).0.inmux.00.input-13
net probe-connected-input       hm2_[HOSTMOT2](BOARD).0.inmux.00.input-14

net probe-trig-input => motion.probe-input 

# signal connection to functions
# create a signal for the estop loopback
net estop-loop iocontrol.0.user-enable-out => iocontrol.0.emc-enable-in

# create signals for tool loading loopback
#net tool-prep-loop iocontrol.0.tool-prepare => iocontrol.0.tool-prepared
#net tool-change-loop iocontrol.0.tool-change => iocontrol.0.tool-changed


#
# homing
#

#
# In this example, each of the three axes have their own home switch.  All
# home switches are connected to GPIO 25, though hostmot2 boards generally
# have enough GPIO pins to put each axis' home switch on its own pin.
#
# Each switch is normally open, momentarily closed.  When the switch is open,
# GPIO 25 floats high (because that is the hostmot2 way).  When the switch is
# closed, it shorts GPIO 25 to ground.
#
# EMC expects the value on the .home-sw-in HAL pin to be active high, ie
# True when the switch is closed and False when the switch is open.
# We get this behavior by linking the GPIO .in_not pin instead of the .in
# pin.
#

#net home-switch <= 
net home-x-input => joint.0.home-sw-in
net home-y-input => joint.1.home-sw-in
net home-z-input => joint.2.home-sw-in



net emcmot.04.enable => hm2_[HOSTMOT2](BOARD).0.pwmgen.05.enable
# position command signals
setp hm2_[HOSTMOT2](BOARD).0.pwmgen.05.output-type 1 #PWM up on pin0, #PWM down on pin1
setp hm2_[HOSTMOT2](BOARD).0.pwmgen.05.offset-mode 1 # offset mode so 50% = 0
setp hm2_[HOSTMOT2](BOARD).0.pwmgen.05.scale [JOINT_4]OUTPUT_SCALE

#################################################################################################################################
#----------------MPG----------------------------------------------------------------
#wczytanie sterownika
loadusr -W xhc-whb04b-6 -H 

loadrt ilowpass names=ilowpass.jog.x,ilowpass.jog.y,ilowpass.jog.z,ilowpass.jog.a
addf   ilowpass.jog.x       servo-thread
addf   ilowpass.jog.y       servo-thread
addf   ilowpass.jog.z       servo-thread
addf   ilowpass.jog.a       servo-thread
setp   ilowpass.jog.x.scale 100
setp   ilowpass.jog.y.scale 100
setp   ilowpass.jog.z.scale 100
setp   ilowpass.jog.a.scale 100
setp   ilowpass.jog.x.gain  0.01
setp   ilowpass.jog.y.gain  0.01
setp   ilowpass.jog.z.gain  0.01
setp   ilowpass.jog.a.gain  0.01

loadrt scale names=scale.axis.x,scale.axis.y,scale.axis.z,scale.axis.a,rpm_rps
addf   scale.axis.x         servo-thread
addf   scale.axis.y         servo-thread
addf   scale.axis.z         servo-thread
addf   scale.axis.a         servo-thread
setp   scale.axis.x.gain    0.01 
setp   scale.axis.y.gain    0.01 
setp   scale.axis.z.gain    0.01
setp   scale.axis.a.gain    0.01  
setp   scale.axis.x.offset  0
setp   scale.axis.y.offset  0
setp   scale.axis.z.offset  0
setp   scale.axis.a.offset  0

# ######################################################################
# Signals configuration
# ######################################################################

# Connect emergency stop signals
net  pdnt.machine.is-on                  halui.machine.is-on                whb.halui.machine.is-on
net  pdnt.machine.on                     whb.halui.machine.on               halui.machine.on
net  pdnt.machine.off                    whb.halui.machine.off              halui.machine.off

# Connect program related signals
#net  pdnt.program.is-idle                whb.halui.program.is-idle          halui.program.is-idle
#net  pdnt.program.is-paused              whb.halui.program.is-paused        halui.program.is-paused
#net  pdnt.program.is-running             whb.halui.program.is-running       halui.program.is-running
#net  pdnt.program.resume                 whb.halui.program.resume           halui.program.resume
#net  pdnt.program.pause                  whb.halui.program.pause            halui.program.pause
#net  pdnt.program.run                    whb.halui.program.run              halui.program.run
#net  pdnt.program.stop                   whb.halui.program.stop             halui.program.stop

# Connect "selected axis" signals    
net  pdnt.joint.X.select                 whb.halui.joint.x.select           halui.joint.0.select
net  pdnt.joint.Y.select                 whb.halui.joint.y.select           halui.joint.1.select
net  pdnt.joint.Z.select                 whb.halui.joint.z.select           halui.joint.2.select
#net pdnt.joint.A.select                 whb.halui.joint.a.select           halui.joint.3.select


# Connect jog signals for step and continuous mode
#net  pdnt.stepgen.00.maxvel              hpg.stepgen.00.maxvel              whb.stepgen.00.maxvel
#net  pdnt.stepgen.01.maxvel              hpg.stepgen.01.maxvel              whb.stepgen.01.maxvel
#net  pdnt.stepgen.02.maxvel              hpg.stepgen.02.maxvel              whb.stepgen.02.maxvel
#net pdnt.stepgen.03.maxvel              hpg.stepgen.03.maxvel              whb.stepgen.03.maxvel

#net  pdnt.stepgen.00.position-scale      hpg.stepgen.00.position-scale      whb.stepgen.00.position-scale
#net  pdnt.stepgen.01.position-scale      hpg.stepgen.01.position-scale      whb.stepgen.01.position-scale
#net  pdnt.stepgen.02.position-scale      hpg.stepgen.02.position-scale      whb.stepgen.02.position-scale
#net pdnt.stepgen.03.position-scale      hpg.stepgen.03.position-scale      whb.stepgen.03.position-scale


net  pdnt.axis.0.jog-scale               whb.axis.0.jog-scale               scale.axis.x.in      
net  pdnt.axis.1.jog-scale               whb.axis.1.jog-scale               scale.axis.y.in      
net  pdnt.axis.2.jog-scale               whb.axis.2.jog-scale               scale.axis.z.in  
#net  pdnt.axis.3.jog-scale               whb.axis.3.jog-scale               scale.axis.a.in     

net  scale.axis.0.jog-scale              scale.axis.x.out                   axis.x.jog-scale
net  scale.axis.0.jog-scale => joint.0.jog-scale
net  scale.axis.1.jog-scale              scale.axis.y.out                   axis.y.jog-scale
net  scale.axis.1.jog-scale => joint.1.jog-scale
net  scale.axis.2.jog-scale              scale.axis.z.out                   axis.z.jog-scale
net  scale.axis.2.jog-scale => joint.2.jog-scale
#net  scale.axis.3.jog-scale              scale.axis.a.out                   axis.a.jog-scale

net  pdnt.axis.0.jog-counts              whb.axis.0.jog-counts              ilowpass.jog.x.in
net  pdnt.axis.1.jog-counts              whb.axis.1.jog-counts              ilowpass.jog.y.in
net  pdnt.axis.2.jog-counts              whb.axis.2.jog-counts              ilowpass.jog.z.in
#net  pdnt.axis.3.jog-counts              whb.axis.3.jog-counts              ilowpass.jog.a.in
# tu trzeba zmienić?

net  pdnt.ilowpass.jog.0.jog-counts      ilowpass.jog.x.out                 axis.x.jog-counts
net  pdnt.ilowpass.jog.0.jog-counts => joint.0.jog-counts
net  pdnt.ilowpass.jog.1.jog-counts      ilowpass.jog.y.out                 axis.y.jog-counts
net  pdnt.ilowpass.jog.1.jog-counts => joint.1.jog-counts
net  pdnt.ilowpass.jog.2.jog-counts      ilowpass.jog.z.out                 axis.z.jog-counts
net  pdnt.ilowpass.jog.2.jog-counts => joint.2.jog-counts
#net  pdnt.ilowpass.jog.3.jog-counts      ilowpass.jog.a.out                 axis.a.jog-counts

#net jog-x 
net  pdnt.axis.0.jog-enable              whb.axis.0.jog-enable              axis.x.jog-enable
net  pdnt.axis.0.jog-enable => joint.0.jog-enable
net  pdnt.axis.1.jog-enable              whb.axis.1.jog-enable              axis.y.jog-enable
net  pdnt.axis.1.jog-enable => joint.1.jog-enable
net  pdnt.axis.2.jog-enable              whb.axis.2.jog-enable              axis.z.jog-enable
net  pdnt.axis.2.jog-enable => joint.2.jog-enable
#net pdnt.axis.3.jog-enable               whb.axis.3.jog-enable              axis.a.jog-enable

net  pdnt.axis.0.jog-vel-mode            whb.axis.0.jog-vel-mode            axis.x.jog-vel-mode
net  pdnt.axis.0.jog-vel-mode => joint.0.jog-vel-mode
net  pdnt.axis.1.jog-vel-mode            whb.axis.1.jog-vel-mode            axis.y.jog-vel-mode
net  pdnt.axis.1.jog-vel-mode => joint.1.jog-vel-mode
net  pdnt.axis.2.jog-vel-mode            whb.axis.2.jog-vel-mode            axis.z.jog-vel-mode
net  pdnt.axis.2.jog-vel-mode => joint.2.jog-vel-mode
#net pdnt.axis.3.jog-vel-mode            whb.axis.3.jog-vel-mode            axis.a.jog-vel-mode


# Connect macro buttons to mdi commands

#net pdnt.macro.1                        whb.button.macro-1                 halui.mdi-command-01
#net pdnt.macro.2                        whb.button.macro-2                 halui.mdi-command-02
#net pdnt.macro.3                        whb.button.macro-3				   halui.mdi-command-03
#net pdnt.macro.4                        whb.button.macro-4                 halui.mdi-command-04

#net pdnt.macro.6                        whb.button.macro-6                 halui.mdi-command-06
             
#net pdnt.macro.8                        whb.button.macro-8                 halui.mdi-command-08
#net pdnt.macro.9                        whb.button.macro-9                 halui.mdi-command-09
#net pdnt.macro.10                       whb.button.macro-10                halui.mdi-command-10

#net pdnt.macro.11                       whb.button.macro-11                halui.mdi-command-11
#net pdnt.macro.12                       whb.button.macro-12                halui.mdi-command-12
#net pdnt.macro.13                       whb.button.macro-13                halui.home-all
#net pdnt.macro.14                       whb.button.macro-14                halui.mdi-command-14
#net pdnt.macro.15                       whb.button.macro-15                halui.mdi-command-15
#net pdnt.macro.16                       whb.button.macro-16                halui.mdi-command-16


# Connect reset, stop, start/pause/resume buttons to halui
# toggles whb.halui.estop.{activate, reset} which are
# already connected to halui.estop.{activate, reset} via whb.halui.estop.{activate, reset}
net  pdnt.button.reset                   whb.button.reset
# already linked to halui.program.stop via whb.program.stop
net  pdnt.button.stop                    whb.button.stop
# toggles whb.halui.program{run, pause, resume} which are 
# already connected to halui.program.{run, pause, resume} via whb.halui.program.{run, pause, resume}
net  pdnt.button.start-pause             whb.button.start-pause     

# Connect special positions signals
#net  pdnt.button.m-home                  whb.button.m-home                  halui.mdi-command-05
#net  pdnt.button.safe-z                  whb.button.safe-z                  halui.mdi-command-17

#net  pdnt.button.w-home                  whb.button.w-home                  halui.mdi-command-07
#net  pdnt.button.s-on-off                whb.button.s-on-off                halui.mdi-command-18

# unused, just exposes pendant interna
net pdnt.button.fn                       whb.button.fn

# probe command
#net  pdnt.button.probe-z                 whb.button.probe-z                halui.mdi-command-19

# unused, just exposes pendant interna
net  pdnt.button.mode-continuous         whb.button.mode-continuous

# unused, just exposes pendant interna
net  pdnt.button.mode-step               whb.button.mode-step

# Connect spindle related signals
net  spindle.is-on                       whb.halui.spindle.is-on
net  spindle.stop                        whb.halui.spindle.stop
net  spindle.forward                     whb.halui.spindle.forward
net  spindle.reverse                     whb.halui.spindle.reverse


# min/max override depends on [DISPLAY]MIN_SPINDLE_OVERRIDE and [DISPLAY]MAX_SPINDLE_OVERRIDE
net  spindle.spindle-override.value      whb.halui.spindle-override.value		halui.spindle.0.override.value
net  spindle.spindle-override.increase   whb.halui.spindle-override.increase	halui.spindle.0.override.increase
net  spindle.spindle-override.decrease   whb.halui.spindle-override.decrease	halui.spindle.0.override.decrease
net  spindle.velocity.abs-rpm            whb.motion.spindle-speed-abs

# Connect machine mode related signals
net  pdnt.halui.mode.auto                whb.halui.mode.auto                halui.mode.auto
net  pdnt.halui.mode.joint               whb.halui.mode.joint               halui.mode.joint
net  pdnt.halui.mode.manual              whb.halui.mode.manual              halui.mode.manual
net  pdnt.halui.mode.mdi                 whb.halui.mode.mdi                 halui.mode.mdi
net  pdnt.halui.mode.is-auto             halui.mode.is-auto                 whb.halui.mode.is-auto
net  pdnt.halui.mode.is-joint            halui.mode.is-joint                whb.halui.mode.is-joint
net  pdnt.halui.mode.is-manual           halui.mode.is-manual               whb.halui.mode.is-manual
net  pdnt.halui.mode.is-mdi              halui.mode.is-mdi                  whb.halui.mode.is-mdi

# Connect feed rate related signals
net  pdnt.halui.feed-override.scale        whb.halui.feed-override.scale        halui.feed-override.scale
net  pdnt.halui.feed-override.direct-val   whb.halui.feed-override.direct-val   halui.feed-override.direct-value
net  pdnt.halui.feed-override.counts       whb.halui.feed-override.counts       halui.feed-override.counts
#net  pdnt.halui.feed-override.count-enable whb.halui.feed-override.count-enable halui.feed-override.count-enable
#net  pdnt.halui.feed-override.value        halui.feed-override.value            whb.halui.feed-override.value
setp                                       whb.halui.feed-override.min-value    [DISPLAY]MIN_FEED_OVERRIDE
setp                                       whb.halui.feed-override.max-value    [DISPLAY]MAX_FEED_OVERRIDE

# min/max override depends on [DISPLAY]MIN_FEED_OVERRIDE and [DISPLAY]MAX_FEED_OVERRIDE
net  pdnt.halui.feed-override.increase   whb.halui.feed-override.increase   halui.feed-override.increase
net  pdnt.halui.feed-override.decrease   whb.halui.feed-override.decrease   halui.feed-override.decrease
#net  pdnt.button.feed-plus               whb.button.feed-plus
#net  pdnt.button.feed-minus              whb.button.feed-minus
     

# For printing the speed F:xxxx on display, the motion.current-vel velocity is used.
net  pdnt.motion.current-vel             motion.current-vel                 whb.motion.current-vel

# Connect axis position related signals
net  pdnt.halui.axis.0.pos-feedback      halui.axis.x.pos-feedback          whb.halui.axis.0.pos-feedback
net  pdnt.halui.axis.1.pos-feedback      halui.axis.y.pos-feedback          whb.halui.axis.1.pos-feedback
net  pdnt.halui.axis.2.pos-feedback      halui.axis.z.pos-feedback          whb.halui.axis.2.pos-feedback
#net  pdnt.halui.axis.3.pos-feedback      halui.axis.a.pos-feedback          whb.halui.axis.3.pos-feedback

net  pdnt.halui.axis.0.pos-relative      halui.axis.x.pos-relative          whb.halui.axis.0.pos-relative
net  pdnt.halui.axis.1.pos-relative      halui.axis.y.pos-relative          whb.halui.axis.1.pos-relative
net  pdnt.halui.axis.2.pos-relative      halui.axis.z.pos-relative          whb.halui.axis.2.pos-relative
#net  pdnt.halui.axis.3.pos-relative      halui.axis.a.pos-relative          whb.halui.axis.3.pos-relative

